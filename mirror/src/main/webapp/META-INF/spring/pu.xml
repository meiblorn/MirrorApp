<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/9.0/core/openspaces-core.xsd">

    <!--
        PropertyPlaceholderConfigurer resolves placeholders in bean property values of context definitions.
        It pulls values from a properties file into bean definitions.
        The default placeholder syntax: ${...}
    -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <!--
        A factory for connections to the physical data source.
    -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${data-source-driver}"/>
        <property name="url" value="${data-source-url}"/>
        <property name="username" value="${data-source-username}"/>
        <property name="password" value="${data-source-password}"/>
    </bean>

    <!--
        Factory bean that creates a Hibernate SessionFactory, which makes Session instances.
        Session - main interface between Java and Hibernate. Its provides a lot of operations
        for instances of mapped entity classes. For example, save() and persist() operations result in an SQL INSERT,
        delete() in an SQL DELETE and update() or merge() in an SQL UPDATE.
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">

        <!-- Connection to the physical data source -->
        <property name="dataSource" ref="dataSource"/>

        <!--Mapping *.hbm.xml documents -->
        <property name="mappingResources">
            <list>
                <value>Event.hbm.xml</value>
            </list>
        </property>

        <!-- Factory property that imitates hibernate.cfg file -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate-dialect}</prop>
                <prop key="hibernate.cache.provider_class">
                    org.hibernate.cache.NoCacheProvider
                </prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>

                <!--<prop key="hibernate.cache.provider_class">-->
                <!--org.openspaces.hibernate.cache.SimpleMapCacheProvider-->
                <!--</prop>-->
                <!--<prop key="gigaspace.hibernate.cache.url">-->
                <!--jini://*/*/events-->
                <!--</prop>-->

            </props>
        </property>
    </bean>

    <!--
        Data source configuration for Hibernate.
    -->
    <bean id="hibernateDataSource" class="org.openspaces.persistency.hibernate.DefaultHibernateExternalDataSource">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <os-core:space id="mirror" url="/./mirror" schema="mirror" external-data-source="hibernateDataSource">
        <os-core:properties>
            <props>
                <!--<prop key="space-config.engine.cache_policy">1</prop>-->
                <!--<prop key="space-config.external-data-source.usage">read-only</prop>-->
                <!--<prop key="cluster-config.cache-loader.external-data-source">true</prop>-->
                <!--<prop key="cluster-config.cache-loader.central-data-source">true</prop>-->
                <prop key="cluster-config.mirror-service.url">
                    jini://*/mirror_container1/mirror
                </prop>
                <!--<prop key="cluster-config.mirror-service.bulk-size">100</prop>-->
                <!--<prop key="cluster-config.mirror-service.interval-millis">2000</prop>-->
                <!--<prop key="cluster-config.mirror-service.interval-opers">100</prop>-->
                <!--<prop key="cluster-config.groups.group.repl-policy.repl-original-state">true</prop>-->
                <!--<prop key="space-config.engine:cache_policy">1</prop>-->
                <!--<prop key="space-config.external-data-source.usage">read-write</prop>-->
                <!--<prop key="cluster-config.cache-loader.external-data-source">true</prop>-->
                <!--<prop key="cluster-config.cache-loader.central-data-source">true</prop>-->
                <!--<prop key="space-config.mirror-service.cluster.name">events</prop>-->
                <!--<prop key="space-config.mirror-service.cluster.partitions">1</prop>-->
                <!--<prop key="space-config.mirror-service.cluster.backups-per-partition">0</prop>-->
            </props>
        </os-core:properties>
    </os-core:space>

</beans>